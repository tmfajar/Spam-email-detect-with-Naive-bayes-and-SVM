# -*- coding: utf-8 -*-
"""Tubes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tDP13XlrbdgPgMSv_0Z1vJmr9iTDoX1v
"""

import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt

from nltk.stem import SnowballStemmer
from nltk.stem import PorterStemmer
from nltk.corpus import stopwords

from textblob import TextBlob
from textblob import Word

df = pd.read_csv('spamEmails.csv')
df['EmailText'].head()
df['EmailText'] = df['EmailText'].apply(lambda x:' '.join(x.lower() for x in x.split()))

import nltk
nltk.download("stopwords")

stop_words = stopwords.words('english')
st = PorterStemmer()

df['EmailText'] = df['EmailText'].apply(lambda x : ' '.join(st.stem(word) for word in x.split()))
df['EmailText'].head()

import nltk
nltk.download('wordnet')

df['EmailText'] = df['EmailText'].apply(lambda x: ' '.join(Word(word).lemmatize() for word in x.split()))
df.head()

import sklearn.feature_extraction.text as text
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn import model_selection, preprocessing, naive_bayes, metrics, svm

train_x, valid_x, train_y, valid_y = model_selection.train_test_split(df['EmailText'], df['Label'])
tfidf_vect = TfidfVectorizer(analyzer='word', token_pattern=r'\w{1,}', max_features=5000)
tfidf_vect.fit(df['EmailText'])

xtrain_tfidf = tfidf_vect.transform(train_x)
xvalid_tfidf = tfidf_vect.transform(valid_x)

def train_model(classifier, feature_vector_train, label):
    # fit the training dataset on the classifier
    classifier.fit(feature_vector_train, label)
    # predict the labels on validation dataset
    return classifier

nb_model = train_model(naive_bayes.MultinomialNB(alpha=0.2), xtrain_tfidf, train_y)
predictions = nb_model.predict(xvalid_tfidf)
nb_accuracy = metrics.accuracy_score(predictions, valid_y)
print("Accuracy: ", nb_accuracy)

from sklearn import model_selection,svm
from sklearn.model_selection import GridSearchCV

cv = CountVectorizer()
features = cv.fit_transform(train_x)

tuned_parameters = {'kernel': ['linear','rbf'],'gamma': [1e-3, 1e-4], 'C':[1,10,100,1000]}
model = GridSearchCV(svm.SVC(),tuned_parameters)

model.fit(features, train_y)
print(model.best_params_)

features_test = cv.transform(valid_x)
print("Accuracy of the Model is : ", model.score(features_test, valid_y))